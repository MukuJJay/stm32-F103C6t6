#include <stdint.h>
#include "led.h"

void delay(uint32_t count)
{
    for (uint32_t i = 0; i < count; i++);
}

void led_init_all(void)
{
    /* Enable clock for GPIOB (APB2ENR bit 2) */
    volatile uint32_t *pRccApb2enr   = (uint32_t *)0x40021018;
    volatile uint32_t *pGpioBModeReg = (uint32_t *)0x40010800;

    *pRccApb2enr |= (1U << 2);

    /* Configure LED1..LED4 pins as general purpose output push-pull */
    *pGpioBModeReg &= ~((0xF << (4 * LED1))  \
                       | (0xF << (4 * LED2))  \
                       | (0xF << (4 * LED3))  \
                       | (0xF << (4 * LED4)));

    *pGpioBModeReg |=  ((1U << (4 * LED1))  \
                       | (1U << (4 * LED2))  \
                       | (1U << (4 * LED3))  \
                       | (1U << (4 * LED4)));

#if 0
    /* Optionally configure output type (OTYPER) if needed on other series */
    volatile uint32_t *pGpioBOpTypeReg = (uint32_t *)0x40010804;
    *pGpioBOpTypeReg &= ~((1U << LED1)
                        | (1U << LED2)
                        | (1U << LED3)
                        | (1U << LED4));
#endif

    /* Ensure all LEDs start off */
    led_off(LED1);
    led_off(LED2);
    led_off(LED3);
    led_off(LED4);
}

void led_on(uint8_t led_no)
{
    volatile uint32_t *pGpioB_BSRR = (uint32_t *)0x40010810;
    *pGpioB_BSRR |= (1U << led_no);
}

void led_off(uint8_t led_no)
{
    volatile uint32_t *pGpioB_BSRR = (uint32_t *)0x40010810;
    *pGpioB_BSRR |= (1U << (16 + led_no));
}
