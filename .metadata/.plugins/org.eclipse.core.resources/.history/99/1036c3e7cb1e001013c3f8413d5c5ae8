#ifndef LED_H_
#define LED_H_

#define LED1 12
#define LED2 13
#define LED3 13
#define LED4 15

#define DELAY_COUNT_1MS 		 1250U
#define DELAY_COUNT_1S  		(1000U * DELAY_COUNT_1MS)
#define DELAY_COUNT_500MS  		(500U  * DELAY_COUNT_1MS)
#define DELAY_COUNT_250MS 		(250U  * DELAY_COUNT_1MS)
#define DELAY_COUNT_125MS 		(125U  * DELAY_COUNT_1MS)

void led_init_all(void);
void led_on(uint8_t led_no);
void led_off(uint8_t led_no);
void delay(uint32_t count);

/* === Base Addresses & Register Definitions === */

/* RCC base and AHB1 peripheral clock register */
#define RCC_BASE        0x40023800U
#define RCC_AHB1ENR     (*(volatile uint32_t*)(RCC_BASE + 0x30U))  /* RCC AHB1 Enable Register :contentReference[oaicite:0]{index=0} */

/* GPIOB base and register offsets */
#define GPIOB_BASE      0x40020400U                                    /* GPIOB peripheral boundary :contentReference[oaicite:1]{index=1} */
#define GPIO_MODER_OFF  0x00U       /* GPIOx_MODER offset */
#define GPIO_ODR_OFF    0x14U       /* GPIOx_ODR offset */
#define GPIO_BSRR_OFF   0x18U       /* GPIOx_BSRR offset */

/* Handy register accessors */
#define GPIOB_MODER     (*(volatile uint32_t*)(GPIOB_BASE + GPIO_MODER_OFF))
#define GPIOB_ODR       (*(volatile uint32_t*)(GPIOB_BASE + GPIO_ODR_OFF))
#define GPIOB_BSRR      (*(volatile uint32_t*)(GPIOB_BASE + GPIO_BSRR_OFF))

#endif /* LED_H_ */
