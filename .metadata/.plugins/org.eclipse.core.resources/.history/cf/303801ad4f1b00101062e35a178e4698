#ifndef MAIN_H_
#define MAIN_H_

/* Some memory calculations macros */
#define SIZE_TASK_STACK 1024U
#define SIZE_SCHED_STACK 1024U

#define SRAM_START 0x20000000U
#define SIZE_SRAM ((6) * (1024))
#define SRAM_END ((SRAM_START) + (SIZE_SRAM))

#define T1_STACK_START SRAM_END
#define T2_STACK_START ((SRAM_END) - (SIZE_TASK_STACK))
#define T3_STACK_START ((SRAM_END) - (2 * SIZE_TASK_STACK))
#define T4_STACK_START ((SRAM_END) - (3 * SIZE_TASK_STACK))
#define IDLE_STACK_START ((SRAM_END) - (4 * SIZE_TASK_STACK))
#define SCHED_STACK_START ((SRAM_END) - (5 * SIZE_TASK_STACK))

/* some other macros */
#define TICK_HZ 1000U
#define HSI_CLK 72000000U
#define SYSTICK_TIM_CLK HSI_CLK

#define MAX_TASKS 5
#define DUMMY_XPSR 0x01000000U

#define TASK_READY_STATE 0x00
#define TASK_BLOCKED_STATE 0xFF

#define INTERRUPT_DISABLE() do{__asm volatile("MOV R0, #0x1"); __asm volatile("MSR PRIMASK, R0");}while(0)
#define INTERRUPT_ENABLE() do{__asm volatile("MOV R0, #0x0"); __asm volatile("MSR PRIMASK, R0");}while(0)



#define RCC_BASE        0x40021000UL
#define RCC             ((RCC_TypeDef *) RCC_BASE)

typedef struct {
    volatile uint32_t CR;
    volatile uint32_t CFGR;
    volatile uint32_t CIR;
    volatile uint32_t APB2RSTR;
    volatile uint32_t APB1RSTR;
    volatile uint32_t AHBENR;
    volatile uint32_t APB2ENR;
    volatile uint32_t APB1ENR;
    volatile uint32_t BDCR;
    volatile uint32_t CSR;
} RCC_TypeDef;

#define RCC_CR_HSION    (1 << 0)
#define RCC_CR_HSIRDY   (1 << 1)
#define RCC_CFGR_SW     (3 << 0)
#define RCC_CFGR_SWS    (3 << 2)
#define RCC_CFGR_HPRE   (0xF << 4)
#define RCC_CFGR_PPRE1  (7 << 8)
#define RCC_CFGR_PPRE2  (7 << 11)
#define RCC_CR_PLLON    (1 << 24)
#define RCC_CR_PLLRDY   (1 << 25)
#define RCC_CR_HSEON    (1 << 16)

#endif /* MAIN_H_ */
